{"ast":null,"code":"const httpService = {\n  login: async data => {\n    const response = await fetch(\"http://localhost:3030/user/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    if (response.ok) {\n      const result = await response.json();\n      const token = result.token;\n      localStorage.setItem(\"token\", token);\n      return {\n        success: true,\n        token\n      };\n    } else {\n      return {\n        success: false,\n        error: \"Falha no login\"\n      };\n    }\n  },\n  createUser: data => {\n    return fetch(\"http://localhost:3030/user/create\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n  },\n  getToken: () => {\n    return localStorage.getItem(\"token\");\n  },\n  getContents: () => {\n    return fetch(\"http://localhost:3030/contents\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": localStorage.getItem(\"token\")\n      }\n    });\n  },\n  addLibrary: movieId => {\n    return fetch(`http://localhost:3030/favorites/create/${movieId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": localStorage.getItem(\"token\")\n      }\n    });\n  },\n  removeLibrary: movieId => {\n    return fetch(`http://localhost:3030/favorites/delete/${movieId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": localStorage.getItem(\"token\")\n      }\n    });\n  },\n  get\n};\nexport default httpService;","map":{"version":3,"names":["httpService","login","data","response","fetch","method","headers","body","JSON","stringify","ok","result","json","token","localStorage","setItem","success","error","createUser","getToken","getItem","getContents","addLibrary","movieId","removeLibrary","get"],"sources":["C:/Users/Isabelly Camilly/.MoviePlay/hello/src/services/httpService.js"],"sourcesContent":["const httpService = {\r\n    login: async (data) => {\r\n        const response = await fetch(\"http://localhost:3030/user/login\", {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        });\r\n\r\n        if (response.ok) {\r\n            const result = await response.json();\r\n            const token = result.token; \r\n\r\n            localStorage.setItem(\"token\", token);\r\n            return { success: true, token };\r\n        } else {\r\n            return { success: false, error: \"Falha no login\" };\r\n        }\r\n    },\r\n    createUser: (data) => {\r\n        return fetch(\"http://localhost:3030/user/create\",\r\n        {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(data)\r\n        })\r\n    },\r\n    getToken: () => {\r\n        return localStorage.getItem(\"token\");\r\n    },\r\n    getContents: () => {\r\n        return fetch(\"http://localhost:3030/contents\",\r\n       {\r\n           method: \"GET\",\r\n           headers: {\r\n               \"Content-Type\": \"application/json\",\r\n               \"Authorization\": localStorage.getItem(\"token\")\r\n           }\r\n       })  \r\n    },\r\n    addLibrary: (movieId) => {\r\n        return fetch(`http://localhost:3030/favorites/create/${movieId}`, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": localStorage.getItem(\"token\")\r\n            }\r\n        })\r\n    },\r\n    removeLibrary: (movieId) => {\r\n        return fetch(`http://localhost:3030/favorites/delete/${movieId}`, {\r\n            method: \"DELETE\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": localStorage.getItem(\"token\")\r\n            }\r\n        });\r\n    },\r\n    get\r\n\r\n}\r\n\r\nexport default httpService"],"mappings":"AAAA,MAAMA,WAAW,GAAG;EAChBC,KAAK,EAAE,MAAOC,IAAI,IAAK;IACnB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC7DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC7B,CAAC,CAAC;IAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;MACb,MAAMC,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MACpC,MAAMC,KAAK,GAAGF,MAAM,CAACE,KAAK;MAE1BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;MACpC,OAAO;QAAEG,OAAO,EAAE,IAAI;QAAEH;MAAM,CAAC;IACnC,CAAC,MAAM;MACH,OAAO;QAAEG,OAAO,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAiB,CAAC;IACtD;EACJ,CAAC;EACDC,UAAU,EAAGhB,IAAI,IAAK;IAClB,OAAOE,KAAK,CAAC,mCAAmC,EAChD;MACIC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,IAAI;IAC7B,CAAC,CAAC;EACN,CAAC;EACDiB,QAAQ,EAAEA,CAAA,KAAM;IACZ,OAAOL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;EACxC,CAAC;EACDC,WAAW,EAAEA,CAAA,KAAM;IACf,OAAOjB,KAAK,CAAC,gCAAgC,EAC9C;MACIC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEQ,YAAY,CAACM,OAAO,CAAC,OAAO;MACjD;IACJ,CAAC,CAAC;EACL,CAAC;EACDE,UAAU,EAAGC,OAAO,IAAK;IACrB,OAAOnB,KAAK,CAAE,0CAAyCmB,OAAQ,EAAC,EAAE;MAC9DlB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEQ,YAAY,CAACM,OAAO,CAAC,OAAO;MACjD;IACJ,CAAC,CAAC;EACN,CAAC;EACDI,aAAa,EAAGD,OAAO,IAAK;IACxB,OAAOnB,KAAK,CAAE,0CAAyCmB,OAAQ,EAAC,EAAE;MAC9DlB,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEQ,YAAY,CAACM,OAAO,CAAC,OAAO;MACjD;IACJ,CAAC,CAAC;EACN,CAAC;EACDK;AAEJ,CAAC;AAED,eAAezB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}